const { createCanvas, loadImage } = require('canvas')
const QRCode = require('qrcode')

/**
 * Generate a PNG image containing order details and QR code
 * @param {Object} orderData - Order information
 * @param {Object} orderData.buyerName - Name of the buyer
 * @param {Object} orderData.buyerPhone - Phone number of the buyer
 * @param {Object} orderData.deliveryAddress - Delivery address details
 * @param {String} orderData.deliveryAddress.place - Place name
 * @param {String} orderData.deliveryAddress.dzongkhag - Dzongkhag name
 * @param {String} orderData.qrCode - QR code data URL or payload
 * @param {String} orderData.orderId - Order ID
 * @returns {Promise<Buffer>} PNG buffer
 */
async function generateOrderImage(orderData) {
  try {
    // Create canvas with A4-like proportions (595 x 842 pixels)
    const canvas = createCanvas(595, 842)
    const ctx = canvas.getContext('2d')
    
    // Set white background
    ctx.fillStyle = '#FFFFFF'
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    
    // Set default text color
    ctx.fillStyle = '#000000'
    
    // Header - DrukFarm title
    ctx.font = 'bold 36px sans-serif'
    ctx.textAlign = 'center'
    ctx.fillText('DrukFarm', canvas.width / 2, 60)
    
    // Subtitle
    ctx.font = '24px sans-serif'
    ctx.fillText('Order Delivery Details', canvas.width / 2, 100)
    
    // Order ID
    ctx.font = 'bold 18px sans-serif'
    ctx.textAlign = 'left'
    ctx.fillText(`Order ID: #${orderData.orderId.slice(-6)}`, 40, 140)
    
    // Line separator
    ctx.strokeStyle = '#CCCCCC'
    ctx.lineWidth = 1
    ctx.beginPath()
    ctx.moveTo(40, 155)
    ctx.lineTo(555, 155)
    ctx.stroke()
    
    // Buyer Information Section
    ctx.font = 'bold 22px sans-serif'
    ctx.fillStyle = '#000000'
    ctx.fillText('Buyer Information', 40, 190)
    
    ctx.font = '16px sans-serif'
    ctx.fillText(`Name: ${orderData.buyerName || 'N/A'}`, 40, 220)
    ctx.fillText(`Phone: +975 ${orderData.buyerPhone || 'N/A'}`, 40, 245)
    
    // Delivery Address Section
    ctx.font = 'bold 22px sans-serif'
    ctx.fillText('Delivery Address', 40, 290)
    
    ctx.font = '16px sans-serif'
    const deliveryText = [
      `Drop-off Point: ${orderData.deliveryAddress.place}`,
      `Dzongkhag: ${orderData.deliveryAddress.dzongkhag}`,
      'Country: Bhutan'
    ]
    
    let yPos = 320
    deliveryText.forEach(line => {
      ctx.fillText(line, 40, yPos)
      yPos += 25
    })
    
    // Generate QR Code
    let qrDataUrl
    if (orderData.qrCode) {
      if (orderData.qrCode.startsWith('data:image')) {
        // Already a data URL
        qrDataUrl = orderData.qrCode
      } else if (typeof orderData.qrCode === 'string') {
        // Generate QR code from string
        qrDataUrl = await QRCode.toDataURL(orderData.qrCode, {
          errorCorrectionLevel: 'M',
          margin: 2,
          scale: 8,
          width: 200,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        })
      } else {
        // Generate QR code from object
        qrDataUrl = await QRCode.toDataURL(JSON.stringify(orderData.qrCode), {
          errorCorrectionLevel: 'M',
          margin: 2,
          scale: 8,
          width: 200,
          color: {
            dark: '#000000',
            light: '#FFFFFF'
          }
        })
      }
    }
    
    // QR Code Section
    ctx.font = 'bold 22px sans-serif'
    ctx.fillText('Order QR Code', 40, 440)
    
    if (qrDataUrl) {
      // Load and draw QR code image
      const qrImage = await loadImage(qrDataUrl)
      ctx.drawImage(qrImage, 40, 460, 200, 200)
      
      ctx.font = '14px sans-serif'
      ctx.fillText('Scan this QR code for order verification', 40, 680)
    } else {
      ctx.font = 'italic 16px sans-serif'
      ctx.fillText('QR code not available', 40, 480)
    }
    
    // Footer
    ctx.font = '12px sans-serif'
    ctx.fillStyle = '#808080'
    ctx.textAlign = 'center'
    ctx.fillText('Generated by DrukFarm System', canvas.width / 2, 780)
    ctx.fillText(new Date().toLocaleString(), canvas.width / 2, 800)
    
    // Return PNG as buffer
    const pngBuffer = canvas.toBuffer('image/png')
    return pngBuffer
  } catch (error) {
    console.error('Image generation error:', error)
    throw new Error('Failed to generate order image')
  }
}

module.exports = { generateOrderImage }
